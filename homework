CREATE TABLE IF NOT EXISTS users_old (
	id SERIAL PRIMARY KEY, 
    firstname VARCHAR(50),
    lastname VARCHAR(50),
    email VARCHAR(120) UNIQUE
);



DROP PROCEDURE IF EXISTS users_old_move;
DELIMITER //
CREATE PROCEDURE users_old_move(IN users_id_move INT)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    ROLLBACK;

    START TRANSACTION;

    INSERT INTO users_old (id, firstname, lastname, email)
    SELECT id, firstname, lastname, email
    FROM users
    WHERE id = users_id_move;

    COMMIT;
END //
DELIMITER ;


DROP PROCEDURE IF EXISTS hello;
DELIMITER //
CREATE FUNCTION hello()
RETURNS VARCHAR(25) READS SQL DATA
BEGIN 
    SET @current_time = CURTIME();
    SET @greeting = '';

    IF @current_time >= '06:00:00' AND @current_time < '12:00:00' THEN
        SET @greeting = 'Доброе утро !';
    ELSEIF @current_time >= '12:00:00' AND @current_time < '18:00:00' THEN
        SET @greeting = 'Доброй день !';
    ELSEIF @current_time >= '18:00:00' AND @current_time < '00:00:00' THEN
        SET @greeting = 'Доброго вечера !';
    ELSE
        SET @greeting = 'Доброй ночи !';
    END IF;

    RETURN @greeting;
END //
DELIMITER ;




SELECT * FROM users;
CALL users_old_move(4);
SELECT * FROM users_old;
SELECT hello() AS greeting;



CREATE TABLE logs (
log_id INT AUTO_INCREMENT PRIMARY KEY,
table_name VARCHAR(50) NOT NULL,
record_id INT NOT NULL,
created_tm TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE = ARCHIVE; 

DELIMITER //
CREATE TRIGGER after_insert_users
AFTER INSERT ON users
FOR EACH ROW
BEGIN
    INSERT INTO logs (table_name, record_id) VALUES ('users', NEW.user_id);
END;
//
DELIMITER ;
